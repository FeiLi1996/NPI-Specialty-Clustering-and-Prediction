}
}
dt_copy
}
#Read in custom dataset
df<-openxlsx::read.xlsx('dataset.xlsx')
#Convert to datatable
datatable <- as.data.table(df)
datatable
#summary statistics of the raw data
summary(factorize_str(datatable))
#Check if there are duplicate prescriptions.There should be only 1 unique prescription ID for each row.
#Should return nothing if all prescriptions are unique
datatable[ , .N , by='rx_id'][N>1]
datatable_2 <- copy(datatable)
#Select relevant columns
datatable_2 <- datatable_2 [ , .(doctor_id,specialty,therapeutic_labeling)]
#Aggregate at  doctor and therapeutic class level
datatable_2_agg <- datatable_2[ , .N , by =c('doctor_id','therapeutic_labeling')]
datatable_2_agg
#Create new columns to see proportions of drug class prescribed by each doctor
datatable_2_agg[, total_rx := sum(N), by = 'doctor_id']
datatable_2_agg[ , rx_percentage := round((N/total_rx),1)]
datatable_2_agg
#Pivot table to get data at doctor level
#The possible therapeutic class would be the columns
datatable_2_pivot <- pivot_wider(datatable_2_agg, id_cols = doctor_id, names_from = therapeutic_labeling, values_from = rx_percentage)
datatable_2_pivot
#Attempting to fill all columns' Null values as 0 if the doctor wasn't involved with those therapeutic classes
index_column_length <- length(colnames(datatable_2_pivot))
setnafill(datatable_2_pivot[ ,2:index_column_length], fill=0)
datatable_2_pivot
#Create a table unique at doctor_id and specialty level
doctor_specialty_mapping <- unique(datatable[ , .(doctor_id,specialty)] , by=c('doctor_id','specialty'))
doctor_specialty_mapping
#Create a new column that combines the doctor_id and specialty
#This new column will be used to label the points on the PCA graph later on. Without this label, we won't know if cardiologist point is referring to doctor_id 1 or doctor_id 2
doctor_specialty_mapping [, custom_specialty := paste(specialty,doctor_id)]
#Delete the other column as it isn't needed
doctor_specialty_mapping [,specialty:= NULL]
doctor_specialty_mapping
#Bring in the specialty back to the pivot table
df_3_pivot <- merge( datatable_2_pivot, doctor_specialty_mapping , on='doctor_id')
df_3_pivot
#The prcomp() function doesn't work on datatable so we are working with dataframes now
df_4_pivot <- df_3_pivot %>%
select(-c(doctor_id, custom_specialty))
#Set the rowname to be the 'custom_specialty' so that the value is conserved when doing PCA
row.names(df_4_pivot) <- df_3_pivot$custom_specialty
df_4_pivot
#calculate principal components
#We don't need to scale since they are all the columns are in the same number format so we set scale to False
results <- prcomp(df_4_pivot, scale = F)
#In R, eigenvectors point in the negative direction by default, so we’ll multiply by -1 to reverse the signs.
results$rotation <- -1*results$rotation
#display principal components
results$rotation
#calculate total variance explained by each principal component
pc_variances  <- results$sdev^2 / sum(results$sdev^2)
pc_variances <- round( pc_variances , 3)
pc_variances
biplot(results, scale = 0 )
pc_dt <- as.data.table(results$x)
pc_dt <- cbind( df_3_pivot$custom_specialty,pc_dt[,.(PC1,PC2)])
pc_dt
#Just graphing the principal component values for samples
ggplot(pc_dt, aes(x=PC1, y=PC2)) +
geom_point() +
xlab(paste("PC1 : ", pc_variances[1], "%", sep="")) +
ylab(paste("PC2 : ", pc_variances[2], "%", sep="")) +
geom_text(label=pc_dt$V1 ,angle = 10 , vjust=1 ,size=3.5) + theme_bw() +
ggtitle(label='NPI Specialty Rx Behavior Cluster') +
theme(plot.title = element_text(hjust = 0.5))
#Using the elbow method to find ideal # of clusters
fviz_nbclust(pc_dt[ , 2:3], kmeans, method = "wss")
#make this example reproducible
set.seed(1)
#perform k-means clustering with k = 4 clusters
km <- kmeans(pc_dt[ , 2:3], centers = 4, nstart = 25)
#view results
km
# Preparation data for kmeans visualization
df <- as.data.frame(results$x[ , 1:2])
class(df)
df
#Visual the 2D graph with kmeans clustering
fviz_cluster(km, data = df) +
ggtitle(label='NPI Specialty Rx Behavior Cluster') +
theme(plot.title = element_text(hjust = 0.5))
library(tidyverse)
library(caTools)
library(readr)
library(data.table)
library(openxlsx)
library(factoextra)
library(cluster)
factorize_str <- function (dt){
#Purpose:Temporary converts a datatable's character datatypes into factor. This way when summarize function is used, it lists out the counts of the              categorical variables
#input:(datatable)
#output:(datatable) returns a copy of the datatable but with all the character datatypes as factors
#Making a copy to not affect the original datatable
dt_copy <- copy(dt)
for (col_name in colnames(dt_copy)){
if (is.character(dt_copy[[col_name]])){
set(dt_copy, j = col_name, value = as.factor(dt_copy[[col_name]]))
}
}
dt_copy
}
#Read in custom dataset
df<-openxlsx::read.xlsx('dataset.xlsx')
#Convert to datatable
datatable <- as.data.table(df)
datatable
#summary statistics of the raw data
summary(factorize_str(datatable))
#Check if there are duplicate prescriptions.There should be only 1 unique prescription ID for each row.
#Should return nothing if all prescriptions are unique
datatable[ , .N , by='rx_id'][N>1]
datatable_2 <- copy(datatable)
#Select relevant columns
datatable_2 <- datatable_2 [ , .(doctor_id,specialty,therapeutic_labeling)]
#Aggregate at  doctor and therapeutic class level
datatable_2_agg <- datatable_2[ , .N , by =c('doctor_id','therapeutic_labeling')]
datatable_2_agg
#Create new columns to see proportions of drug class prescribed by each doctor
datatable_2_agg[, total_rx := sum(N), by = 'doctor_id']
datatable_2_agg[ , rx_percentage := round((N/total_rx),1)]
datatable_2_agg
#Pivot table to get data at doctor level
#The possible therapeutic class would be the columns
datatable_2_pivot <- pivot_wider(datatable_2_agg, id_cols = doctor_id, names_from = therapeutic_labeling, values_from = rx_percentage)
datatable_2_pivot
#Attempting to fill all columns' Null values as 0 if the doctor wasn't involved with those therapeutic classes
index_column_length <- length(colnames(datatable_2_pivot))
setnafill(datatable_2_pivot[ ,2:index_column_length], fill=0)
datatable_2_pivot
#Create a table unique at doctor_id and specialty level
doctor_specialty_mapping <- unique(datatable[ , .(doctor_id,specialty)] , by=c('doctor_id','specialty'))
doctor_specialty_mapping
#Create a new column that combines the doctor_id and specialty
#This new column will be used to label the points on the PCA graph later on. Without this label, we won't know if cardiologist point is referring to doctor_id 1 or doctor_id 2
doctor_specialty_mapping [, custom_specialty := paste(specialty,doctor_id)]
#Delete the other column as it isn't needed
doctor_specialty_mapping [,specialty:= NULL]
doctor_specialty_mapping
#Bring in the specialty back to the pivot table
df_3_pivot <- merge( datatable_2_pivot, doctor_specialty_mapping , on='doctor_id')
df_3_pivot
#The prcomp() function doesn't work on datatable so we are working with dataframes now
df_4_pivot <- df_3_pivot %>%
select(-c(doctor_id, custom_specialty))
#Set the rowname to be the 'custom_specialty' so that the value is conserved when doing PCA
row.names(df_4_pivot) <- df_3_pivot$custom_specialty
df_4_pivot
#calculate principal components
#We don't need to scale since they are all the columns are in the same number format so we set scale to False
results <- prcomp(df_4_pivot, scale = F)
#In R, eigenvectors point in the negative direction by default, so we’ll multiply by -1 to reverse the signs.
results$rotation <- -1*results$rotation
#display principal components
results$rotation
#calculate total variance explained by each principal component
pc_variances  <- results$sdev^2 / sum(results$sdev^2)
pc_variances <- round( pc_variances , 3)
pc_variances
biplot(results, scale = 0 )
pc_dt <- as.data.table(results$x)
pc_dt <- cbind( df_3_pivot$custom_specialty,pc_dt[,.(PC1,PC2)])
pc_dt
#Just graphing the principal component values for samples
ggplot(pc_dt, aes(x=PC1, y=PC2)) +
geom_point() +
xlab(paste("PC1 : ", pc_variances[1], "%", sep="")) +
ylab(paste("PC2 : ", pc_variances[2], "%", sep="")) +
geom_text(label=pc_dt$V1 ,angle = 10 , vjust=1 ,size=3.5) + theme_bw() +
ggtitle(label='NPI Specialty Rx Behavior Cluster') +
theme(plot.title = element_text(hjust = 0.5))
#Using the elbow method to find ideal # of clusters
fviz_nbclust(pc_dt[ , 2:3], kmeans, method = "wss")
#make this example reproducible
set.seed(1)
#perform k-means clustering with k = 4 clusters
km <- kmeans(pc_dt[ , 2:3], centers = 4, nstart = 25)
#view results
km
# Preparation data for kmeans visualization
df <- as.data.frame(results$x[ , 1:2])
class(df)
df
#Visual the 2D graph with kmeans clustering
fviz_cluster(km, data = df) +
ggtitle(label='NPI Specialty Rx Behavior Cluster') +
theme(plot.title = element_text(hjust = 0.5))
library(tidyverse)
library(caTools)
library(readr)
library(data.table)
library(openxlsx)
library(factoextra)
library(cluster)
factorize_str <- function (dt){
#Purpose:Temporary converts a datatable's character datatypes into factor. This way when summarize function is used, it lists out the counts of the              categorical variables
#input:(datatable)
#output:(datatable) returns a copy of the datatable but with all the character datatypes as factors
#Making a copy to not affect the original datatable
dt_copy <- copy(dt)
for (col_name in colnames(dt_copy)){
if (is.character(dt_copy[[col_name]])){
set(dt_copy, j = col_name, value = as.factor(dt_copy[[col_name]]))
}
}
dt_copy
}
#Read in custom dataset
df<-openxlsx::read.xlsx('dataset.xlsx')
#Convert to datatable
datatable <- as.data.table(df)
datatable
#summary statistics of the raw data
summary(factorize_str(datatable))
#Check if there are duplicate prescriptions.There should be only 1 unique prescription ID for each row.
#Should return nothing if all prescriptions are unique
datatable[ , .N , by='rx_id'][N>1]
datatable_2 <- copy(datatable)
#Select relevant columns
datatable_2 <- datatable_2 [ , .(doctor_id,specialty,therapeutic_labeling)]
#Aggregate at  doctor and therapeutic class level
datatable_2_agg <- datatable_2[ , .N , by =c('doctor_id','therapeutic_labeling')]
datatable_2_agg
#Create new columns to see proportions of drug class prescribed by each doctor
datatable_2_agg[, total_rx := sum(N), by = 'doctor_id']
datatable_2_agg[ , rx_percentage := round((N/total_rx),1)]
datatable_2_agg
#Pivot table to get data at doctor level
#The possible therapeutic class would be the columns
datatable_2_pivot <- pivot_wider(datatable_2_agg, id_cols = doctor_id, names_from = therapeutic_labeling, values_from = rx_percentage)
datatable_2_pivot
#Attempting to fill all columns' Null values as 0 if the doctor wasn't involved with those therapeutic classes
index_column_length <- length(colnames(datatable_2_pivot))
setnafill(datatable_2_pivot[ ,2:index_column_length], fill=0)
datatable_2_pivot
#Create a table unique at doctor_id and specialty level
doctor_specialty_mapping <- unique(datatable[ , .(doctor_id,specialty)] , by=c('doctor_id','specialty'))
doctor_specialty_mapping
#Create a new column that combines the doctor_id and specialty
#This new column will be used to label the points on the PCA graph later on. Without this label, we won't know if cardiologist point is referring to doctor_id 1 or doctor_id 2
doctor_specialty_mapping [, custom_specialty := paste(specialty,doctor_id)]
#Delete the other column as it isn't needed
doctor_specialty_mapping [,specialty:= NULL]
doctor_specialty_mapping
#Bring in the specialty back to the pivot table
df_3_pivot <- merge( datatable_2_pivot, doctor_specialty_mapping , on='doctor_id')
df_3_pivot
#The prcomp() function doesn't work on datatable so we are working with dataframes now
df_4_pivot <- df_3_pivot %>%
select(-c(doctor_id, custom_specialty))
#Set the rowname to be the 'custom_specialty' so that the value is conserved when doing PCA
row.names(df_4_pivot) <- df_3_pivot$custom_specialty
df_4_pivot
#calculate principal components
#We don't need to scale since they are all the columns are in the same number format so we set scale to False
results <- prcomp(df_4_pivot, scale = F)
#In R, eigenvectors point in the negative direction by default, so we’ll multiply by -1 to reverse the signs.
results$rotation <- -1*results$rotation
#display principal components
results$rotation
#calculate total variance explained by each principal component
pc_variances  <- results$sdev^2 / sum(results$sdev^2)
pc_variances <- round( pc_variances , 3)
pc_variances
biplot(results, scale = 0 )
pc_dt <- as.data.table(results$x)
pc_dt <- cbind( df_3_pivot$custom_specialty,pc_dt[,.(PC1,PC2)])
pc_dt
#Just graphing the principal component values for samples
ggplot(pc_dt, aes(x=PC1, y=PC2)) +
geom_point() +
xlab(paste("PC1 : ", pc_variances[1], "%", sep="")) +
ylab(paste("PC2 : ", pc_variances[2], "%", sep="")) +
geom_text(label=pc_dt$V1 ,angle = 10 , vjust=1 ,size=3.5) + theme_bw() +
ggtitle(label='NPI Specialty Rx Behavior Cluster') +
theme(plot.title = element_text(hjust = 0.5))
#Using the elbow method to find ideal # of clusters
fviz_nbclust(pc_dt[ , 2:3], kmeans, method = "wss")
#make this example reproducible
set.seed(1)
#perform k-means clustering with k = 4 clusters
km <- kmeans(pc_dt[ , 2:3], centers = 4, nstart = 25)
#view results
km
# Preparation data for kmeans visualization
df <- as.data.frame(results$x[ , 1:2])
class(df)
df
#Visual the 2D graph with kmeans clustering
fviz_cluster(km, data = df) +
ggtitle(label='NPI Specialty Rx Behavior Cluster') +
theme(plot.title = element_text(hjust = 0.5))
library(tidyverse)
library(caTools)
library(readr)
library(data.table)
library(openxlsx)
library(factoextra)
library(cluster)
factorize_str <- function (dt){
#Purpose:Temporary converts a datatable's character datatypes into factor. This way when summarize function is used, it lists out the counts of the              categorical variables
#input:(datatable)
#output:(datatable) returns a copy of the datatable but with all the character datatypes as factors
#Making a copy to not affect the original datatable
dt_copy <- copy(dt)
for (col_name in colnames(dt_copy)){
if (is.character(dt_copy[[col_name]])){
set(dt_copy, j = col_name, value = as.factor(dt_copy[[col_name]]))
}
}
dt_copy
}
#Read in custom dataset
df<-openxlsx::read.xlsx('dataset.xlsx')
#Convert to datatable
datatable <- as.data.table(df)
datatable
#summary statistics of the raw data
summary(factorize_str(datatable))
#Check if there are duplicate prescriptions.There should be only 1 unique prescription ID for each row.
#Should return nothing if all prescriptions are unique
datatable[ , .N , by='rx_id'][N>1]
datatable_2 <- copy(datatable)
#Select relevant columns
datatable_2 <- datatable_2 [ , .(doctor_id,specialty,therapeutic_labeling)]
#Aggregate at  doctor and therapeutic class level
datatable_2_agg <- datatable_2[ , .N , by =c('doctor_id','therapeutic_labeling')]
datatable_2_agg
#Create new columns to see proportions of drug class prescribed by each doctor
datatable_2_agg[, total_rx := sum(N), by = 'doctor_id']
datatable_2_agg[ , rx_percentage := round((N/total_rx),1)]
datatable_2_agg
#Pivot table to get data at doctor level
#The possible therapeutic class would be the columns
datatable_2_pivot <- pivot_wider(datatable_2_agg, id_cols = doctor_id, names_from = therapeutic_labeling, values_from = rx_percentage)
datatable_2_pivot
#Attempting to fill all columns' Null values as 0 if the doctor wasn't involved with those therapeutic classes
index_column_length <- length(colnames(datatable_2_pivot))
setnafill(datatable_2_pivot[ ,2:index_column_length], fill=0)
datatable_2_pivot
#Create a table unique at doctor_id and specialty level
doctor_specialty_mapping <- unique(datatable[ , .(doctor_id,specialty)] , by=c('doctor_id','specialty'))
doctor_specialty_mapping
#Create a new column that combines the doctor_id and specialty
#This new column will be used to label the points on the PCA graph later on. Without this label, we won't know if cardiologist point is referring to doctor_id 1 or doctor_id 2
doctor_specialty_mapping [, custom_specialty := paste(specialty,doctor_id)]
#Delete the other column as it isn't needed
doctor_specialty_mapping [,specialty:= NULL]
doctor_specialty_mapping
#Bring in the specialty back to the pivot table
df_3_pivot <- merge( datatable_2_pivot, doctor_specialty_mapping , on='doctor_id')
df_3_pivot
#The prcomp() function doesn't work on datatable so we are working with dataframes now
df_4_pivot <- df_3_pivot %>%
select(-c(doctor_id, custom_specialty))
#Set the rowname to be the 'custom_specialty' so that the value is conserved when doing PCA
row.names(df_4_pivot) <- df_3_pivot$custom_specialty
df_4_pivot
#calculate principal components
#We don't need to scale since they are all the columns are in the same number format so we set scale to False
results <- prcomp(df_4_pivot, scale = F)
#In R, eigenvectors point in the negative direction by default, so we’ll multiply by -1 to reverse the signs.
results$rotation <- -1*results$rotation
#display principal components
results$rotation
#calculate total variance explained by each principal component
pc_variances  <- results$sdev^2 / sum(results$sdev^2)
pc_variances <- round( pc_variances , 3)
pc_variances
biplot(results, scale = 0 )
pc_dt <- as.data.table(results$x)
pc_dt <- cbind( df_3_pivot$custom_specialty,pc_dt[,.(PC1,PC2)])
pc_dt
#Just graphing the principal component values for samples
ggplot(pc_dt, aes(x=PC1, y=PC2)) +
geom_point() +
xlab(paste("PC1 : ", pc_variances[1], "%", sep="")) +
ylab(paste("PC2 : ", pc_variances[2], "%", sep="")) +
geom_text(label=pc_dt$V1 ,angle = 10 , vjust=1 ,size=3.5) + theme_bw() +
ggtitle(label='NPI Specialty Rx Behavior Cluster') +
theme(plot.title = element_text(hjust = 0.5))
#Using the elbow method to find ideal # of clusters
fviz_nbclust(pc_dt[ , 2:3], kmeans, method = "wss")
#make this example reproducible
set.seed(1)
#perform k-means clustering with k = 4 clusters
km <- kmeans(pc_dt[ , 2:3], centers = 4, nstart = 25)
#view results
km
# Preparation data for kmeans visualization
df <- as.data.frame(results$x[ , 1:2])
class(df)
df
#Visual the 2D graph with kmeans clustering
fviz_cluster(km, data = df) +
ggtitle(label='NPI Specialty Rx Behavior Cluster') +
theme(plot.title = element_text(hjust = 0.5))
library(tidyverse)
library(caTools)
library(readr)
library(data.table)
library(openxlsx)
library(factoextra)
library(cluster)
factorize_str <- function (dt){
#Purpose:Temporary converts a datatable's character datatypes into factor. This way when summarize function is used, it lists out the counts of the              categorical variables
#input:(datatable)
#output:(datatable) returns a copy of the datatable but with all the character datatypes as factors
#Making a copy to not affect the original datatable
dt_copy <- copy(dt)
for (col_name in colnames(dt_copy)){
if (is.character(dt_copy[[col_name]])){
set(dt_copy, j = col_name, value = as.factor(dt_copy[[col_name]]))
}
}
dt_copy
}
#Read in custom dataset
df<-openxlsx::read.xlsx('dataset.xlsx')
#Convert to datatable
datatable <- as.data.table(df)
datatable
#summary statistics of the raw data
summary(factorize_str(datatable))
#Check if there are duplicate prescriptions.There should be only 1 unique prescription ID for each row.
#Should return nothing if all prescriptions are unique
datatable[ , .N , by='rx_id'][N>1]
datatable_2 <- copy(datatable)
#Select relevant columns
datatable_2 <- datatable_2 [ , .(doctor_id,specialty,therapeutic_labeling)]
#Aggregate at  doctor and therapeutic class level
datatable_2_agg <- datatable_2[ , .N , by =c('doctor_id','therapeutic_labeling')]
datatable_2_agg
#Create new columns to see proportions of drug class prescribed by each doctor
datatable_2_agg[, total_rx := sum(N), by = 'doctor_id']
datatable_2_agg[ , rx_percentage := round((N/total_rx),1)]
datatable_2_agg
#Pivot table to get data at doctor level
#The possible therapeutic class would be the columns
datatable_2_pivot <- pivot_wider(datatable_2_agg, id_cols = doctor_id, names_from = therapeutic_labeling, values_from = rx_percentage)
datatable_2_pivot
#Attempting to fill all columns' Null values as 0 if the doctor wasn't involved with those therapeutic classes
index_column_length <- length(colnames(datatable_2_pivot))
setnafill(datatable_2_pivot[ ,2:index_column_length], fill=0)
datatable_2_pivot
#Create a table unique at doctor_id and specialty level
doctor_specialty_mapping <- unique(datatable[ , .(doctor_id,specialty)] , by=c('doctor_id','specialty'))
doctor_specialty_mapping
#Create a new column that combines the doctor_id and specialty
#This new column will be used to label the points on the PCA graph later on. Without this label, we won't know if cardiologist point is referring to doctor_id 1 or doctor_id 2
doctor_specialty_mapping [, custom_specialty := paste(specialty,doctor_id)]
#Delete the other column as it isn't needed
doctor_specialty_mapping [,specialty:= NULL]
doctor_specialty_mapping
#Bring in the specialty back to the pivot table
df_3_pivot <- merge( datatable_2_pivot, doctor_specialty_mapping , on='doctor_id')
df_3_pivot
#The prcomp() function doesn't work on datatable so we are working with dataframes now
df_4_pivot <- df_3_pivot %>%
select(-c(doctor_id, custom_specialty))
#Set the rowname to be the 'custom_specialty' so that the value is conserved when doing PCA
row.names(df_4_pivot) <- df_3_pivot$custom_specialty
df_4_pivot
#calculate principal components
#We don't need to scale since they are all the columns are in the same number format so we set scale to False
results <- prcomp(df_4_pivot, scale = F)
#In R, eigenvectors point in the negative direction by default, so we’ll multiply by -1 to reverse the signs.
results$rotation <- -1*results$rotation
#display principal components
results$rotation
#calculate total variance explained by each principal component
pc_variances  <- results$sdev^2 / sum(results$sdev^2)
pc_variances <- round( pc_variances , 3)
pc_variances
#reverse the signs of the scores
results$x <- -1*results$x
results$x
biplot(results, scale = 0 )
pc_dt <- as.data.table(results$x)
pc_dt <- cbind( df_3_pivot$custom_specialty,pc_dt[,.(PC1,PC2)])
pc_dt
#Just graphing the principal component values for samples
ggplot(pc_dt, aes(x=PC1, y=PC2)) +
geom_point() +
xlab(paste("PC1 : ", pc_variances[1], "%", sep="")) +
ylab(paste("PC2 : ", pc_variances[2], "%", sep="")) +
geom_text(label=pc_dt$V1 ,angle = 10 , vjust=1 ,size=3.5) + theme_bw() +
ggtitle(label='NPI Specialty Rx Behavior Cluster') +
theme(plot.title = element_text(hjust = 0.5))
#Using the elbow method to find ideal # of clusters
fviz_nbclust(pc_dt[ , 2:3], kmeans, method = "wss")
#make this example reproducible
set.seed(1)
#perform k-means clustering with k = 4 clusters
km <- kmeans(pc_dt[ , 2:3], centers = 4, nstart = 25)
#view results
km
# Preparation data for kmeans visualization
df <- as.data.frame(results$x[ , 1:2])
class(df)
df
#Visual the 2D graph with kmeans clustering
fviz_cluster(km, data = df) +
ggtitle(label='NPI Specialty Rx Behavior Cluster') +
theme(plot.title = element_text(hjust = 0.5))
